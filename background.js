// AIÂàÜÁ±ªÁ≥ªÁªüÁõ∏ÂÖ≥ÂèòÈáè
let pluginApiClient = null;
let pluginClassifier = null;

// üîÑ AIÂàÜÊûêÈòüÂàóÁ≥ªÁªü
const analysisQueue = [];
let isQueueProcessorRunning = false;

// üîß [ÁÆÄÂåñ] Áõ¥Êé•‰ΩøÁî®ÂÜÖËÅîAIÊ®°ÂùóÔºå‰∏çÂÜçÂ∞ùËØïÂ§ñÈÉ®Ê®°Âùó
let CategorySchema, AIApiClient, AIClassifier;

console.log('üîß ‰ΩøÁî®ÂÜÖËÅîAIÊ®°Âùó...');

// ÂÜÖËÅîÂÆåÊï¥ÁâàÊú¨ÁöÑCategorySchema
CategorySchema = {
  CATEGORY_SCHEMA: {
    // Technology Innovation
    technology: {
      name: "Technology Innovation",
      description: "Technology development, innovative applications, digital transformation related content",
      subcategories: {
        ai_tech: {
          name: "AI Technology",
          description: "Artificial intelligence, machine learning, deep learning and other AI-related technologies",
          keywords: ["ChatGPT practical tips", "MidJourney painting tutorials", "Python machine learning project examples", "PyTorch deep learning introduction", "Convolutional neural network visualization", "Transformer principle analysis", "AI painting tool reviews", "ChatGPT application cases", "Autonomous driving perception algorithms", "OpenCV vision projects", "Natural language processing application cases", "AI writing assistant tutorials", "Customer service chatbot development", "AI-assisted medical diagnosis demonstrations", "AI educational assistance tools"]
        },
        hardware_tech: {
          name: "Hardware Technology",
          description: "Electronic devices, chips, hardware innovations, etc.",
          keywords: ["iPhone 15 camera performance test", "Kirin chip architecture analysis", "RTX graphics card performance comparison", "MacBook teardown tutorial", "Mobile photography parameter optimization", "5G network speed test", "Apple Watch feature review", "AirPods sound quality analysis", "DIY computer assembly tutorial", "New digital product unboxing videos", "TSMC chip process revealed", "Processor benchmark comparison", "Mobile battery life optimization tips", "Sony camera sensor analysis", "Oculus VR device experience guide"]
        },
        software_dev: {
          name: "Software Development",
          description: "Programming, software engineering, development technologies, etc.",
          keywords: ["Python web scraping project practice", "Vue 3 Composition API tutorial", "Java project practice cases", "React Hooks advanced guide", "MySQL database design examples", "Git common commands practice", "LeetCode programming problem analysis", "Open source project architecture analysis", "Code refactoring best practices", "Flutter cross-platform app development", "Docker container deployment tutorial", "Microservices architecture design cases", "WeChat mini-program practical projects", "Frontend performance optimization tips", "Algorithm visualization tool development"]
        },
        digital_life: {
          name: "Digital Lifestyle",
          description: "Digital applications, smart living, technology experiences, etc.",
          keywords: ["Smart home system setup tutorial", "Essential APP feature recommendations", "Remote work efficiency tools", "Personal cloud storage usage tips", "Smart speaker voice control demonstration", "Robot vacuum review and optimization", "Online learning platform in-depth experience", "Digital payment security practical tips", "Smart wearable device usage insights", "Remote collaboration software operation guide", "Smart door lock installation process", "Smart home appliance remote control tips", "Digital wallet application cases", "Video conferencing software operation tutorial", "Smart lighting system automation"]
        }
      }
    },

    // Culture & Arts
    culture_arts: {
      name: "Culture & Arts",
      description: "Cultural heritage, artistic creation, literature and film related content",
      subcategories: {
        traditional_culture: {
          name: "Traditional Culture",
          description: "Historical culture, traditional arts, folk culture, etc.",
          keywords: ["Forbidden City artifact restoration videos", "Spring Festival folk experience guide", "Ancient architectural art analysis", "Handmade embroidery production tutorial", "Tang poetry and Song lyrics appreciation and interpretation", "Peking opera performance technique analysis", "Hanfu styling tutorial", "Traditional pastry making methods", "Ancient etiquette live demonstration", "Folk instrument performance videos", "Four great classical novels reading guide", "Traditional Chinese painting technique analysis", "Traditional Chinese medicine classic book introduction", "Ancient inventions and technology analysis", "Traditional ceramic production process"]
        },
        modern_arts: {
          name: "Modern Arts",
          description: "Contemporary art, design, creative expression, etc.",
          keywords: ["Contemporary art exhibition reviews", "Modern architectural design case analysis", "Graphic design practical tutorials", "Digital illustration creation process", "Photography composition and lighting techniques", "Digital art works display", "Installation art creation cases", "Modern sculpture design analysis", "Art exhibition curation idea sharing", "Creative thinking training methods", "Modern painting works appreciation", "Art market trend analysis", "Designer interview recordings", "Art education innovation methods", "Cross-border art collaboration cases"]
        },
        literature: {
          name: "Literature & Writing",
          description: "Literary works, writing, poetry and prose, etc.",
          keywords: ["Online novel writing experience", "Modern poetry writing techniques", "Prose writing case analysis", "Literary masterpiece in-depth interpretation", "Writing material organization methods", "Novel character creation methods", "Poetry recitation skill training", "Literary criticism writing methods", "Writer interview selections", "Domestic and international literary award introductions", "Children's literature creation cases", "Science fiction novel writing techniques", "Mystery novel suspense construction", "Translation literature practice cases", "Literary history key points summary"]
        },
        media_film: {
          name: "Music & Film",
          description: "Music, movies, TV series, media content, etc.",
          keywords: ["Popular movie viewing guide", "Classic TV series analysis", "Music creation software tutorials", "Film and TV post-production effects", "Actor performance technique analysis", "Director work creation background analysis", "Movie soundtrack appreciation", "TV series plot in-depth analysis", "Music festival live performance sharing", "Film and TV shooting technique explanation", "Movie box office and market analysis", "Music production DAW software tutorials", "Film and TV special effects production cases", "Actor interview highlights", "Film and TV award ceremonies and analysis"]
        }
      }
    },

    // Science Exploration
    science_exploration: {
      name: "Science Exploration",
      description: "Scientific research, natural exploration, medical health related content",
      subcategories: {
        natural_science: {
          name: "Natural Sciences",
          description: "Physics, chemistry, biology and other basic sciences",
          keywords: ["Quantum mechanics experiment demonstration", "Periodic table fun experiments", "Darwin's evolution theory analysis", "Science experiment video tutorials", "Classical physics law explanation", "Chemical reaction experiment demonstration", "CRISPR gene editing analysis", "Laboratory equipment operation guide", "Laboratory safety operation procedures", "Scientific paper reading techniques", "Famous physicist biographies", "Chemical industry application cases", "Biodiversity protection practices", "Science history anecdotes analysis", "Frontier science technology breakthroughs"]
        },
        medical_health: {
          name: "Medical & Health",
          description: "Medical knowledge, health and wellness, medical technology, etc.",
          keywords: ["Traditional Chinese Medicine health diet plans", "Western medicine diagnosis and treatment technology analysis", "Mental health self-regulation methods", "Nutritional balance health plans", "Fitness training course guidance", "Common disease prevention methods", "Medical equipment usage videos", "Drug mechanism explanation", "Surgical technology development trends", "Rehabilitation treatment case sharing", "Latest medical research progress", "Annual health checkup guide", "First aid skill operation tutorial", "Chronic disease management plans", "Medical ethics case analysis"]
        },
        environment: {
          name: "Environment & Ecology",
          description: "Environmental protection, ecosystems, sustainable development, etc.",
          keywords: ["Climate change scientific analysis", "New environmental technology applications", "Ecological restoration case sharing", "Sustainable development model exploration", "Environmental pollution treatment practices", "Green energy development cases", "Endangered wildlife protection", "Marine ecosystem research", "Forest resource management methods", "Waste sorting and recycling practices", "Clean energy technology display", "Ecological agriculture demonstration projects", "Environmental monitoring equipment usage", "Environmental policy interpretation and impact", "Eco-tourism planning cases"]
        },
        astronomy_geo: {
          name: "Astronomy & Geography",
          description: "Astronomy, geography, space exploration, etc.",
          keywords: ["Astronomical observation technique tutorials", "Landform formation scientific analysis", "Space exploration mission sharing", "Starry sky photography shooting tutorial", "Earth climate change research", "Space station life experience", "Planetary exploration project analysis", "Geological structure analysis cases", "Astronomical telescope usage guide", "Geographic information system practical tutorial", "Universe origin theory explanation", "Earth resource distribution data analysis", "Space technology development progress", "Astrophotography post-processing techniques", "Geographic environment change records"]
        }
      }
    },

    // Society & Humanities
    society_humanity: {
      name: "Society & Humanities",
      description: "Social issues, humanistic thinking, philosophy and psychology related content",
      subcategories: {
        history_philosophy: {
          name: "History & Philosophy",
          description: "Historical events, philosophical thinking, intellectual culture, etc.",
          keywords: ["Major historical event analysis", "Philosophy thought topic discussions", "Ancient civilization development research", "Thinker biography selections", "Historical figure impact evaluation", "Philosophy school system introduction", "Cultural heritage research cases", "Historical archaeological discovery sharing", "Philosophy classic original text interpretation", "Intellectual history systematic sorting", "Historical document verification methods", "Philosophy problem practical discussions", "Cultural comparative research methods", "Historical research methodology", "Philosophy application practice cases"]
        },
        psychology: {
          name: "Psychology",
          description: "Mental health, behavioral analysis, psychological knowledge, etc.",
          keywords: ["Psychological counseling practical techniques", "Emotion management scientific methods", "Interpersonal communication and relationship handling", "Mental illness treatment plans", "Behavioral psychology experimental cases", "Cognitive psychology application scenarios", "Child psychological development guide", "Workplace psychological adjustment methods", "Love psychology analysis", "Stress relief training methods", "Psychological assessment tool usage", "Psychotherapy case analysis", "Social psychology research methods", "Psychological crisis intervention guide", "Mental health education courses"]
        },
        social_issues: {
          name: "Social Issues",
          description: "Social phenomena, public topics, current affairs commentary, etc.",
          keywords: ["Social hot event analysis", "Current affairs news in-depth commentary", "Social phenomenon investigation and analysis", "Public policy discussions", "People's livelihood issue case studies", "Social development trend analysis", "Urban governance experience sharing", "Social equity and justice discussions", "Population policy impact cases", "Education system reform cases", "Healthcare system reform analysis", "Housing policy research", "Employment situation data analysis", "Social security system research", "Social innovation practice cases"]
        },
        law_politics: {
          name: "Law & Politics",
          description: "Legal knowledge, political systems, public policy, etc.",
          keywords: ["Typical legal case analysis", "Political system comparative research", "Policy regulation interpretation techniques", "Constitutional knowledge popularization explanation", "International law case analysis", "Political system reform plans", "Legal practice operation guide", "Policy impact assessment methods", "Legal system construction cases", "Political theory topic discussions", "Legal rights protection practical techniques", "Policy formulation process analysis", "International political relations analysis", "Legal profession development path", "Political participation form analysis"]
        }
      }
    },

    // Lifestyle
    lifestyle: {
      name: "Lifestyle",
      description: "Daily life, personal interests, life skills related content",
      subcategories: {
        food_cooking: {
          name: "Food & Cooking",
          description: "Food preparation, cooking techniques, restaurant recommendations, etc.",
          keywords: ["Home cooking specific methods", "Detailed baking tutorials", "Hot pot base recipe analysis", "Restaurant food reviews", "Local snack preparation techniques", "Nutritional meal recipes", "Seasoning usage tutorials", "Ingredient selection guide", "Kitchen tool usage methods", "Food photography shooting techniques", "Local specialty dish preparation", "Vegetarian cooking detailed steps", "Beverage mixing recipes", "Food culture background introduction", "Kitchen organization tips"]
        },
        travel_adventure: {
          name: "Travel & Adventure",
          description: "Travel guides, adventure experiences, local culture, etc.",
          keywords: ["Detailed travel route planning", "Adventure equipment usage guide", "Attraction ticket booking strategies", "Cultural experience activity recommendations", "Travel photography technique teaching", "Hotel accommodation evaluation and selection", "Local food experience sharing", "Travel route optimization strategies", "Outdoor adventure technique tutorials", "Cultural heritage visit guide", "Travel budget management tips", "Travel safety precautions", "Folk culture experience", "Travel equipment checklist preparation", "Travel insurance purchase strategies"]
        },
        fashion_beauty: {
          name: "Fashion & Beauty",
          description: "Fashion styling, beauty and skincare, trend analysis, etc.",
          keywords: ["Clothing styling practical tips", "Beauty product authentic reviews", "Skincare routine detailed tutorials", "Trend analysis reports", "Makeup technique practical teaching", "Hairstyle design inspiration recommendations", "Clothing styling guide", "Beauty tool usage methods", "Skincare ingredient analysis and recommendations", "Famous fashion brand introductions", "Beauty blogger recommendation cases", "Skincare misconception correction guide", "Fashion photography technique practice", "Beauty product shopping guide", "Fashion culture background interpretation"]
        },
        home_decor: {
          name: "Home & Decoration",
          description: "Home design, renovation and decoration, household items, etc.",
          keywords: ["Home design style analysis", "Renovation material selection tips", "Decoration item matching methods", "Furniture shopping practical guide", "Household item recommendations and reviews", "Interior design layout cases", "Renovation budget planning methods", "Home organization solutions", "Soft furnishing matching tips sharing", "Home feng shui layout analysis", "Renovation construction process guidance", "Home brand recommendation cases", "Household item usage reviews", "DIY home creation tutorials", "Home maintenance and care tips"]
        }
      }
    },

    // Education & Growth
    education_growth: {
      name: "Education & Growth",
      description: "Learning education, personal development, skill enhancement related content",
      subcategories: {
        learning_methods: {
          name: "Learning Methods",
          description: "Learning techniques, educational methods, knowledge acquisition, etc.",
          keywords: ["Effective learning method practice", "Memory training methods", "Time management technique tutorials", "Study plan formulation examples", "Knowledge organization techniques", "Learning efficiency improvement plans", "Exam review strategy sharing", "Learning motivation cultivation methods", "Knowledge system construction cases", "Learning environment optimization tips", "Learning tool practical tutorials", "Learning method evaluation cases", "Good study habit formation", "Knowledge application practice", "Learning outcome assessment methods"]
        },
        career_dev: {
          name: "Career Development",
          description: "Workplace skills, career planning, work experience, etc.",
          keywords: ["Workplace skill improvement cases", "Career planning detailed guide", "Workplace work experience sharing", "Interview technique practice", "Resume creation templates and guidance", "Workplace interpersonal communication skills", "Career transition strategies", "Salary negotiation technique sharing", "Workplace etiquette standard explanation", "Career development path analysis", "Work stress management methods", "Career burnout prevention guide", "Workplace communication practical skills", "Professional qualification certificate acquisition methods", "Entrepreneurship experience sharing cases"]
        },
        skill_training: {
          name: "Skill Training",
          description: "Professional skills, practical skills, training courses, etc.",
          keywords: ["Professional skill training courses", "Practical skill learning methods", "Online course selection recommendations", "Professional ability improvement guide", "Skill certification exam guidance", "Training course design cases", "Skill learning efficient methods", "Professional tool usage tutorials", "Skill practice project sharing", "Training effectiveness evaluation methods", "Skill competition participation cases", "Professional skill assessment standards", "Skill application case analysis", "Training resource recommendation platforms", "Skill development path planning"]
        },
        parenting_education: {
          name: "Parenting & Education",
          description: "Parenting knowledge, family education, child development, etc.",
          keywords: ["Parenting knowledge specific methods", "Parent-child activity design plans", "Family education technique sharing", "Child development guidance cases", "Educational philosophy analysis and practice", "Parent-child communication practical skills", "Child psychological development analysis", "Family education real cases", "Parenting experience exchange sharing", "Children's educational game recommendations", "Parent-child reading promotion methods", "Family education resource organization", "Child behavior management techniques", "Parent-child relationship maintenance plans", "Family education planning methods"]
        }
      }
    },

    // Business & Finance
    business_finance: {
      name: "Business & Finance",
      description: "Business models, investment and finance, economic analysis related content",
      subcategories: {
        entrepreneurship: {
          name: "Entrepreneurship & Investment",
          description: "Entrepreneurial experience, investment philosophy, business models, etc.",
          keywords: ["Entrepreneurship experience sharing cases", "Investment philosophy practical analysis", "Business model design methods", "Enterprise development strategy cases", "Capital operation technique sharing", "Financing channel selection guide", "Startup project evaluation methods", "Investment risk control strategies", "Business plan writing cases", "Startup team building methods", "Market research practical methods", "Investment portfolio management techniques", "Startup policy interpretation cases", "Investment success case analysis", "Business innovation thinking training"]
        },
        market_analysis: {
          name: "Market Analysis",
          description: "Market trends, industry analysis, business insights, etc.",
          keywords: ["Market trend data analysis", "Industry research report interpretation", "Business insight case sharing", "Market research method practice", "Business analysis tool usage", "Market research technique sharing", "Industry competition situation analysis", "Market prediction model application", "Business data analysis techniques", "Market opportunity identification methods", "Industry development trend analysis", "Business strategy formulation guide", "Market risk assessment methods", "Business case practical analysis", "Market research report production"]
        },
        economic_trends: {
          name: "Economic Trends",
          description: "Economic situation, macroeconomics, policy impact, etc.",
          keywords: ["Economic situation in-depth analysis", "Macroeconomic policy interpretation", "Policy impact assessment methods", "Economic trend prediction cases", "Financial policy analysis", "Economic data analysis methods", "Monetary policy research", "Fiscal policy impact analysis", "Economic cycle research cases", "Inflation trend analysis", "Economic growth model analysis", "Economic structure adjustment cases", "International economic relations research", "Economic risk assessment methods", "Economic policy recommendation cases"]
        },
        personal_finance: {
          name: "Financial Planning",
          description: "Personal finance, financial planning, investment advice, etc.",
          keywords: ["Personal financial planning examples", "Financial planning technique tutorials", "Investment finance specific advice", "Wealth management practical methods", "Asset allocation strategy cases", "Financial product analysis and review", "Investment risk assessment methods", "Financial freedom planning solutions", "Tax planning practical techniques", "Insurance product selection guide", "Pension planning methods", "Children's education fund planning tips", "Real estate investment analysis cases", "Fund investment operation methods", "Stock investment beginner tutorials"]
        }
      }
    },

    // Entertainment & Leisure
    entertainment: {
      name: "Entertainment & Leisure",
      description: "Entertainment activities, leisure hobbies, sports competition related content",
      subcategories: {
        gaming: {
          name: "Gaming & Esports",
          description: "Video games, competitive games, gaming culture, etc.",
          keywords: ["Video game walkthrough strategies", "Esports competition live commentary", "Competitive gaming practical techniques", "Gaming culture analysis", "Competition tactical strategy analysis", "Entertainment game recommendation collections", "Famous game streamer recommendations", "Game reviews and analysis", "Esports industry development trends", "Game development technology sharing", "Game plot analysis and explanation", "Game music appreciation guide", "Gaming merchandise recommendations", "Gaming community communication tips", "Gaming history development review"]
        },
        sports: {
          name: "Sports & Fitness",
          description: "Sports events, fitness training, sports culture, etc.",
          keywords: ["Sports event live reviews", "Fitness training guidance", "Competition tactical strategy analysis", "Sports culture background interpretation", "Fitness plan formulation", "Football match tactical explanation", "Champions League highlights review", "Basketball skill training tutorials", "Fitness equipment usage methods", "Sports star interview highlights", "Sports nutrition matching plans", "Sports venue facility introductions", "Sports injury prevention tips", "Sports industry development analysis", "Sports equipment usage and recommendations"]
        },
        variety_shows: {
          name: "Variety & Entertainment",
          description: "Variety shows, entertainment programs, celebrity gossip, etc.",
          keywords: ["Popular variety show recommendations", "Entertainment program commentary analysis", "Celebrity gossip news selections", "Entertainment news sharing and analysis", "Program production behind-the-scenes revelations", "Celebrity interview highlights", "Variety show planning cases", "Entertainment industry development trends", "Celebrity life experience sharing", "Program rating analysis methods", "Entertainment news commentary interpretation", "Variety show editing techniques", "Celebrity fashion styling guide", "Entertainment marketing strategy cases", "Program guest detailed introductions"]
        },
        comedy_humor: {
          name: "Comedy & Humor",
          description: "Humorous content, funny videos, jokes, etc.",
          keywords: ["Funny video selection collections", "Humorous joke sharing selections", "Comedy performance video appreciation", "Interesting content recommendations", "Funny entertainment collection selections", "Netizen divine comment compilations", "Funny picture humor sharing", "Humorous story telling collections", "Comedy movie recommendation analysis", "Funny dubbing work selections", "Humorous dialogue collection sharing", "Funny emoji usage tutorials", "Comedy sketch performance selections", "Creative humorous advertising cases", "Funny variety show highlights"]
        }
      }
    }
  },

  // Ëé∑ÂèñÊâÄÊúâ‰∏ªÁ±ªÂà´
  getMainCategories() {
    return Object.keys(this.CATEGORY_SCHEMA).map(key => ({
      id: key,
      name: this.CATEGORY_SCHEMA[key].name,
      description: this.CATEGORY_SCHEMA[key].description
    }));
  },

  // Ëé∑ÂèñÊåáÂÆö‰∏ªÁ±ªÂà´ÁöÑÂ≠êÁ±ªÂà´
  getSubcategories(mainCategory) {
    if (!this.CATEGORY_SCHEMA[mainCategory]) return [];
    return Object.keys(this.CATEGORY_SCHEMA[mainCategory].subcategories).map(key => ({
      id: key,
      name: this.CATEGORY_SCHEMA[mainCategory].subcategories[key].name,
      description: this.CATEGORY_SCHEMA[mainCategory].subcategories[key].description
    }));
  }
};

// ÂÜÖËÅîÁÆÄÂåñÁâàÊú¨ÁöÑAIApiClient
AIApiClient = class {
    constructor(config) {
      this.config = {
        apiKey: config.apiKey || '',
        model: config.model || 'glm-4.5',
        timeout: config.timeout || 60000,
        temperature: config.temperature || 0.6
      };
    }
    
    async chatCompletion(messages) {
      console.log('üåê Sending API request to Zhipu GLM...');
      const response = await fetch('https://open.bigmodel.cn/api/paas/v4/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.config.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: this.config.model,
          messages: messages,
          temperature: this.config.temperature
        })
      });
      
      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ API response successful');
      return data;
    }
    
    async testConnection() {
      try {
        const result = await this.chatCompletion([
          { role: "user", content: "Test connection, please reply 'Connection successful'" }
        ]);
        return { success: true, response: result.choices[0].message.content };
      } catch (error) {
        return { success: false, message: error.message };
      }
    }
    
  clearCache() {}
  getConfig() { return {...this.config}; }
};

// ÂÜÖËÅîÂÆåÊï¥ÁâàÊú¨ÁöÑAIClassifierÔºà‰∏§Ê≠•ÂàÜÁ±ªÊ≥ïÔºâ
AIClassifier = class {
  constructor(apiClient, categorySchema) {
    this.apiClient = apiClient;
    this.categorySchema = categorySchema;
  }
  
  async classifyContent(content) {
    console.log('üéØ ÂºÄÂßãAIÂàÜÁ±ªÔºà‰∏§Ê≠•ÂàÜÁ±ªÊ≥ïÔºâ...');
    
    // Ê†áÂáÜÂåñÂÜÖÂÆπÊ†ºÂºè
    const normalizedContent = {
      title: content.title || '',
      description: content.description || '',
      tags: content.tags || [],
      platform: content.platform || '',
      rawText: content.rawText || content.title + ' ' + content.description
    };

    try {
      console.log('üéØ ÂºÄÂßãÁ¨¨‰∏ÄÊ≠•Ôºö‰∏ªÁ±ªÂà´ÂàÜÁ±ª...');
      // Á¨¨‰∏ÄÊ≠•ÔºöÁ°ÆÂÆö‰∏ªÁ±ªÂà´
      const mainCategoryResult = await this.classifyMainCategory(normalizedContent);
      console.log('‚úÖ ‰∏ªÁ±ªÂà´ÂàÜÁ±ªÂÆåÊàê:', mainCategoryResult);
      
      console.log('üéØ ÂºÄÂßãÁ¨¨‰∫åÊ≠•ÔºöÂ≠êÁ±ªÂà´ÂàÜÁ±ª...');
      // Á¨¨‰∫åÊ≠•ÔºöÁ°ÆÂÆöÂ≠êÁ±ªÂà´
      const subCategoryResult = await this.classifySubCategory(
        normalizedContent, 
        mainCategoryResult.category
      );
      console.log('‚úÖ Â≠êÁ±ªÂà´ÂàÜÁ±ªÂÆåÊàê:', subCategoryResult);

      // ÂêàÂπ∂ÁªìÊûú
      const finalResult = {
        mainCategory: {
          id: mainCategoryResult.category,
          name: mainCategoryResult.categoryName,
          confidence: mainCategoryResult.confidence,
          reasoning: mainCategoryResult.reasoning
        },
        subCategory: {
          id: subCategoryResult.category,
          name: subCategoryResult.categoryName, 
          confidence: subCategoryResult.confidence,
          reasoning: subCategoryResult.reasoning
        },
        overallConfidence: (mainCategoryResult.confidence + subCategoryResult.confidence) / 2,
        classificationPath: `${mainCategoryResult.categoryName} > ${subCategoryResult.categoryName}`,
        contentSummary: normalizedContent.rawText.substring(0, 100) + (normalizedContent.rawText.length > 100 ? '...' : ''),
        timestamp: new Date().toISOString(),
        method: 'ai_two_step'
      };

      console.log('üéâ AI‰∏§Ê≠•ÂàÜÁ±ªÊàêÂäüÂÆåÊàê!');
      return finalResult;
      
    } catch (error) {
      console.error('‚ùå AIÂàÜÁ±ªÂ§±Ë¥•:', error);
      throw error;
    }
  }

  // Á¨¨‰∏ÄÊ≠•Ôºö‰∏ªÁ±ªÂà´ÂàÜÁ±ª
  async classifyMainCategory(content) {
    console.log('üìã ‰∏ªÁ±ªÂà´ÂàÜÁ±ª - ÊûÑÂª∫ÊèêÁ§∫ËØç...');
    const mainCategories = this.categorySchema.getMainCategories();
    const categoryList = mainCategories
      .map(cat => `${cat.id}: ${cat.name} - ${cat.description}`)
      .join('\n');

    const prompt = `ËØ∑ÂàÜÊûê‰ª•‰∏ãÂÜÖÂÆπÂπ∂Á°ÆÂÆöÂÖ∂ÊâÄÂ±ûÁöÑ‰∏ªË¶ÅÁ±ªÂà´„ÄÇ

ÂÜÖÂÆπ‰ø°ÊÅØÔºö
Ê†áÈ¢òÔºö${content.title || 'Êó†'}
ÊèèËø∞Ôºö${content.description || 'Êó†'}
Ê†áÁ≠æÔºö${content.tags ? content.tags.join(', ') : 'Êó†'}
Âπ≥Âè∞Ôºö${content.platform || 'Êú™Áü•'}

ÂèØÈÄâÁöÑ‰∏ªÁ±ªÂà´Ôºö
${categoryList}

ËØ∑Ê†πÊçÆÂÜÖÂÆπÁöÑ‰∏ªÈ¢òÂíåÊÄßË¥®ÔºåÈÄâÊã©ÊúÄÂêàÈÄÇÁöÑ‰∏ªÁ±ªÂà´„ÄÇ

ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèËøîÂõûÁªìÊûúÔºö
{
  "category": "Á±ªÂà´ID",
  "categoryName": "Á±ªÂà´ÂêçÁß∞", 
  "confidence": 0.85,
  "reasoning": "ÈÄâÊã©Ëøô‰∏™Á±ªÂà´ÁöÑÁêÜÁî±"
}

Ê≥®ÊÑèÔºö
1. categoryÂøÖÈ°ªÊòØ‰∏äËø∞ÂàóË°®‰∏≠ÁöÑÊúâÊïàID
2. confidenceÊòØ0-1‰πãÈó¥ÁöÑÊï∞ÂÄºÔºåË°®Á§∫ÂàÜÁ±ªÁöÑÁΩÆ‰ø°Â∫¶
3. reasoningÁÆÄË¶ÅËØ¥ÊòéÈÄâÊã©ÁêÜÁî±`;

    const messages = [
      {
        role: "system",
        content: "‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑÂÜÖÂÆπÂàÜÁ±ª‰∏ìÂÆ∂ÔºåÊìÖÈïøÂáÜÁ°ÆÂàÜÊûêÂíåÂàÜÁ±ªÂêÑÁßçÁ±ªÂûãÁöÑÂÜÖÂÆπ„ÄÇËØ∑‰∏•Ê†ºÊåâÁÖßË¶ÅÊ±ÇÁöÑJSONÊ†ºÂºèËøîÂõûÁªìÊûú„ÄÇ"
      },
      {
        role: "user", 
        content: prompt
      }
    ];

    const response = await this.apiClient.chatCompletion(messages);
    const result = this.parseClassificationResponse(response.choices[0].message.content, 'main');
    
    return result;
  }

  // Á¨¨‰∫åÊ≠•ÔºöÂ≠êÁ±ªÂà´ÂàÜÁ±ª
  async classifySubCategory(content, mainCategory) {
    console.log(`üìã Â≠êÁ±ªÂà´ÂàÜÁ±ª - ‰∏ªÁ±ªÂà´: ${mainCategory}ÔºåÊûÑÂª∫ÊèêÁ§∫ËØç...`);
    const subCategories = this.categorySchema.getSubcategories(mainCategory);
    
    if (subCategories.length === 0) {
      console.error(`‚ùå ‰∏ªÁ±ªÂà´ ${mainCategory} Ê≤°ÊúâÂèØÁî®ÁöÑÂ≠êÁ±ªÂà´`);
      throw new Error(`‰∏ªÁ±ªÂà´ ${mainCategory} Ê≤°ÊúâÂèØÁî®ÁöÑÂ≠êÁ±ªÂà´`);
    }

    const categoryList = subCategories
      .map(cat => `${cat.id}: ${cat.name} - ${cat.description}`)
      .join('\n');

    const mainCategoryInfo = this.categorySchema.CATEGORY_SCHEMA[mainCategory];

    const prompt = `ËØ∑ÂØπ‰ª•‰∏ãÂÜÖÂÆπËøõË°åÊõ¥ÁªÜËá¥ÁöÑÂàÜÁ±ªÔºåÁ°ÆÂÆöÂÖ∂Âú®"${mainCategoryInfo.name}"Á±ªÂà´‰∏ãÁöÑÂÖ∑‰ΩìÂ≠êÁ±ªÂà´„ÄÇ

ÂÜÖÂÆπ‰ø°ÊÅØÔºö
Ê†áÈ¢òÔºö${content.title || 'Êó†'}
ÊèèËø∞Ôºö${content.description || 'Êó†'}
Ê†áÁ≠æÔºö${content.tags ? content.tags.join(', ') : 'Êó†'}
Âπ≥Âè∞Ôºö${content.platform || 'Êú™Áü•'}

Â∑≤Á°ÆÂÆöÁöÑ‰∏ªÁ±ªÂà´Ôºö${mainCategoryInfo.name} - ${mainCategoryInfo.description}

ÂèØÈÄâÁöÑÂ≠êÁ±ªÂà´Ôºö
${categoryList}

ËØ∑Ê†πÊçÆÂÜÖÂÆπÁöÑÂÖ∑‰ΩìÁâπÂæÅÂíåÁªÜËäÇÔºåÈÄâÊã©ÊúÄÂêàÈÄÇÁöÑÂ≠êÁ±ªÂà´„ÄÇ

ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèËøîÂõûÁªìÊûúÔºö
{
  "category": "Â≠êÁ±ªÂà´ID",
  "categoryName": "Â≠êÁ±ªÂà´ÂêçÁß∞",
  "confidence": 0.85,
  "reasoning": "ÈÄâÊã©Ëøô‰∏™Â≠êÁ±ªÂà´ÁöÑÁêÜÁî±"
}

Ê≥®ÊÑèÔºö
1. categoryÂøÖÈ°ªÊòØ‰∏äËø∞Â≠êÁ±ªÂà´ÂàóË°®‰∏≠ÁöÑÊúâÊïàID
2. confidenceÊòØ0-1‰πãÈó¥ÁöÑÊï∞ÂÄºÔºåË°®Á§∫ÂàÜÁ±ªÁöÑÁΩÆ‰ø°Â∫¶
3. reasoningÁÆÄË¶ÅËØ¥ÊòéÈÄâÊã©ÁêÜÁî±ÔºåÁâπÂà´ÊòØ‰∏∫‰ªÄ‰πàÈÄâÊã©Ëøô‰∏™Â≠êÁ±ªÂà´ËÄå‰∏çÊòØÂÖ∂‰ªñÁöÑ`;

    const messages = [
      {
        role: "system",
        content: "‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑÂÜÖÂÆπÂàÜÁ±ª‰∏ìÂÆ∂ÔºåÁâπÂà´ÊìÖÈïøÁªÜÂàÜÁ±ªÂà´ÁöÑÁ≤æÂáÜÂà§Êñ≠„ÄÇËØ∑‰ªîÁªÜÂàÜÊûêÂÜÖÂÆπÁâπÂæÅÔºå‰∏•Ê†ºÊåâÁÖßJSONÊ†ºÂºèËøîÂõûÁªìÊûú„ÄÇ"
      },
      {
        role: "user",
        content: prompt
      }
    ];

    const response = await this.apiClient.chatCompletion(messages);
    const result = this.parseClassificationResponse(response.choices[0].message.content, 'sub');
    
    return result;
  }

  // Ëß£ÊûêAIÂìçÂ∫î
  parseClassificationResponse(responseContent, type) {
    console.log(`üîç Ëß£Êûê${type}ÂàÜÁ±ªÂìçÂ∫î...`);
    try {
      // Â∞ùËØïÊèêÂèñJSON
      const jsonMatch = responseContent.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        console.error(`‚ùå ${type}ÂàÜÁ±ªÂìçÂ∫î‰∏≠Êú™ÊâæÂà∞ÊúâÊïàÁöÑJSON`);
        throw new Error('Êú™ÊâæÂà∞ÊúâÊïàÁöÑJSONÂìçÂ∫î');
      }

      const result = JSON.parse(jsonMatch[0]);
      
      // È™åËØÅÂøÖÈúÄÂ≠óÊÆµ
      if (!result.category || !result.categoryName || result.confidence === undefined) {
        console.error(`‚ùå ${type}ÂàÜÁ±ªÂìçÂ∫îÁº∫Â∞ëÂøÖÈúÄÂ≠óÊÆµ:`, result);
        throw new Error('ÂìçÂ∫îÁº∫Â∞ëÂøÖÈúÄÂ≠óÊÆµ');
      }

      // È™åËØÅÁΩÆ‰ø°Â∫¶ËåÉÂõ¥
      if (result.confidence < 0 || result.confidence > 1) {
        result.confidence = Math.max(0, Math.min(1, result.confidence));
      }

      console.log(`‚úÖ ${type}ÂàÜÁ±ªÂìçÂ∫îËß£ÊûêÊàêÂäü:`, result);
      return result;

  } catch (error) {
      console.error(`‚ùå Ëß£Êûê${type}ÂàÜÁ±ªÂìçÂ∫îÂ§±Ë¥•:`, error);
      throw error;
    }
  }
  
  clearCache() {}
};

console.log('‚úÖ ÂÜÖËÅîAIÊ®°ÂùóÂä†ËΩΩÂÆåÊàê');
console.log('üîÑ ÈòüÂàóÁ≥ªÁªüÂ∑≤Â∞±Áª™');

// üîÑ ÈòüÂàóÁÆ°ÁêÜÂáΩÊï∞
// Ê∑ªÂä†Âà∞ÂàÜÊûêÈòüÂàó
function addToAnalysisQueue(content, url, data) {
  const queueItem = {
    url: url,
    content: content,
    data: data,
    timestamp: Date.now(),
    retryCount: 0
  };
  
  analysisQueue.push(queueItem);
  console.log(`üì• Ê∑ªÂä†Âà∞ÂàÜÊûêÈòüÂàóÔºåÂΩìÂâçÈòüÂàóÈïøÂ∫¶: ${analysisQueue.length}`);
  
  // ÂêØÂä®ÈòüÂàóÂ§ÑÁêÜÂô®ÔºàÂ¶ÇÊûúËøòÊ≤°ËøêË°åÔºâ
  startQueueProcessor();
  
  return {
    status: "queued",
    queueLength: analysisQueue.length,
    message: "Â∑≤Âä†ÂÖ•ÂàÜÊûêÈòüÂàó"
  };
}

// ÈòüÂàóÂ§ÑÁêÜÂô®
async function startQueueProcessor() {
  if (isQueueProcessorRunning) {
    return; // Â∑≤ÁªèÂú®ËøêË°å‰∫Ü
  }
  
  isQueueProcessorRunning = true;
  console.log('üöÄ ÂêØÂä®ÈòüÂàóÂ§ÑÁêÜÂô®');
  
  while (analysisQueue.length > 0) {
    const item = analysisQueue.shift();
    console.log(`üéØ Â§ÑÁêÜÈòüÂàóÈ°π: ${item.url}`);
    
    try {
      // ÊâßË°åAIÂàÜÊûê
      const result = await performAIAnalysis(item.content, item.data);
      
      // ‰øùÂ≠òÁªìÊûú
      await saveAnalysisResult(item.url, result, item.data);
      
      console.log(`‚úÖ ÈòüÂàóÈ°πÂ§ÑÁêÜÂÆåÊàê: ${item.url}`);
      
    } catch (error) {
      console.error(`‚ùå ÈòüÂàóÈ°πÂ§ÑÁêÜÂ§±Ë¥•: ${item.url}`, error);
      
      // ÈáçËØïÊú∫Âà∂
      if (item.retryCount < 2) {
        item.retryCount++;
        analysisQueue.unshift(item); // ÈáçÊñ∞Âä†ÂÖ•ÈòüÂàóÂ§¥ÈÉ®
        console.log(`üîÑ ÈáçËØïÈòüÂàóÈ°π: ${item.url} (Á¨¨${item.retryCount + 1}Ê¨°)`);
      } else {
        console.log(`üíÄ ÈòüÂàóÈ°πÂ§ÑÁêÜÂ§±Ë¥•ÔºåÊîæÂºÉÈáçËØï: ${item.url}`);
        // ÈôçÁ∫ßÂ§ÑÁêÜ
        await handleAnalysisFailure(item.data, error);
      }
    }
    
    // Ê∑ªÂä†Âª∂ËøüÔºåÈÅøÂÖçAPIÈôêÊµÅ
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  isQueueProcessorRunning = false;
  console.log('üèÅ ÈòüÂàóÂ§ÑÁêÜÂô®ÂÆåÊàê');
}

// ÊâßË°åAIÂàÜÊûê
async function performAIAnalysis(content, data) {
  // ÁÆÄÂçïÊ£ÄÊü•ÔºöÂ¶ÇÊûúÊ≤°ÊúâÂàùÂßãÂåñÔºåÂÖàÂàùÂßãÂåñ
  if (!pluginApiClient || !pluginClassifier) {
    console.log('üîÑ AIÁ≥ªÁªüÊú™ÂàùÂßãÂåñÔºåÂºÄÂßãÂàùÂßãÂåñ...');
    
    const result = await chrome.storage.local.get(['aiApiConfig']);
    if (result.aiApiConfig) {
      initializePluginAPI(result.aiApiConfig);
    } else {
      throw new Error('Êú™ÊâæÂà∞APIÈÖçÁΩÆ');
    }
  }

  let classification = null;
  
  // ÊâßË°åAIÂàÜÁ±ª
  if (pluginClassifier && content) {
    console.log('üéØ ÂºÄÂßãAIÂàÜÁ±ª...');
    classification = await pluginClassifier.classifyContent(content);
    console.log('‚úÖ AIÂàÜÁ±ªÂÆåÊàê!', classification);
    
    // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
    await updateClassificationStats(classification);
  } else {
    console.log('‚ö†Ô∏è AIÂàÜÁ±ªÂô®Êú™Â∞±Áª™ÊàñÊó†ÂÜÖÂÆπ');
  }
  
  return classification;
}

// ‰øùÂ≠òÂàÜÊûêÁªìÊûú
async function saveAnalysisResult(url, classification, data) {
  // ËÆ∞ÂΩïË°å‰∏∫Êï∞ÊçÆ
  console.log('üíæ ÂáÜÂ§áË°å‰∏∫ËÆ∞ÂΩïÊï∞ÊçÆ...');
  const behaviorRecord = {
    timestamp: new Date().toISOString(),
    platform: data.platform,
    action: data.action,
    url: url,
    extractedContent: {
      title: data.extractedContent?.title || '',
      description: data.extractedContent?.description?.substring(0, 200) || '',
      platform: data.extractedContent?.platform || data.platform
    },
    classification: classification,
    qualityScore: data.qualityScore
  };
  
  // ÁîüÊàêÁî®‰∫é‰º†ÁªüÁ≥ªÁªüÁöÑÊ†áÁ≠æ
  let tags = [];
  if (classification) {
    console.log('üè∑Ô∏è Âü∫‰∫éAIÂàÜÁ±ªÁîüÊàêÊ†áÁ≠æ...');
    tags = [
      classification.mainCategory.name,
      classification.subCategory.name
    ];
    console.log('‚úÖ AIÊ†áÁ≠æÁîüÊàêÂÆåÊàê:', tags);
  } else {
    console.log('üè∑Ô∏è ‰ΩøÁî®Â§áÁî®Ê†áÁ≠æÁîüÊàê...');
    // Â§áÁî®Ê†áÁ≠æÁîüÊàê
    tags = generateFallbackTags(data.extractedContent);
    console.log('‚úÖ Â§áÁî®Ê†áÁ≠æÁîüÊàêÂÆåÊàê:', tags);
  }
  
  behaviorRecord.tags = tags;
  
  // ‰øùÂ≠òÂà∞Â≠òÂÇ®
  console.log('üíæ ‰øùÂ≠òË°å‰∏∫ËÆ∞ÂΩïÂà∞Â≠òÂÇ®...');
  const result = await chrome.storage.local.get(["userBehavior"]);
  const behaviorHistory = result.userBehavior || [];
  behaviorHistory.push(behaviorRecord);
  
  // ‰øùÁïôÊúÄËøë100Êù°ËÆ∞ÂΩï
  const limitedHistory = behaviorHistory.slice(-100);
  await chrome.storage.local.set({ userBehavior: limitedHistory });
  
  console.log('‚úÖ Ë°å‰∏∫ËÆ∞ÂΩïÂ∑≤‰øùÂ≠ò');
  console.log('üìä ÂΩìÂâçË°å‰∏∫ËÆ∞ÂΩïÊï∞Èáè:', limitedHistory.length);
  
  // Áõ¥Êé•ÁîüÊàêAIÊé®Ëçê
  generateAIBasedRecommendationsFromHistory(limitedHistory);
  
  return {
    classification: classification,
    tags: tags
  };
}

// Â§ÑÁêÜÂàÜÊûêÂ§±Ë¥•
async function handleAnalysisFailure(data, error) {
  console.log('üîÑ ÈôçÁ∫ßÂà∞‰º†ÁªüÊñπÊ≥ï...');
  
  // ÈôçÁ∫ßÂà∞‰º†ÁªüÊñπÊ≥ï
  const fallbackTags = generateFallbackTags(data.extractedContent);
  console.log('üè∑Ô∏è ÁîüÊàêÂ§áÁî®Ê†áÁ≠æ:', fallbackTags);
  
  recordUserBehavior({
    platform: data.platform,
    action: data.action,
    tags: fallbackTags
  });
  
  return {
    status: "fallback",
    tags: fallbackTags,
    error: error.message
  };
}

// Ëé∑ÂèñÈòüÂàóÁä∂ÊÄÅ
function getQueueStatus() {
  return {
    queueLength: analysisQueue.length,
    isProcessing: isQueueProcessorRunning,
    nextItem: analysisQueue[0] ? {
      url: analysisQueue[0].url,
      timestamp: analysisQueue[0].timestamp
    } : null
  };
}

// ÂºÄÂèëÈò∂ÊÆµÈªòËÆ§ÈÖçÁΩÆÔºàÁîü‰∫ßÁéØÂ¢ÉËØ∑Âà†Èô§ÊàñÊ≥®ÈáäÊéâÔºâ
const DEV_DEFAULT_CONFIG = {
  enabled: true,  // ËÆæÁΩÆ‰∏∫falseÂèØÁ¶ÅÁî®ÂºÄÂèëÈªòËÆ§ÈÖçÁΩÆ
  apiConfig: {
    // Âú®ËøôÈáåÂ°´ÂÖ•ÊÇ®ÁöÑÂºÄÂèëAPIÂØÜÈí•
    apiKey: "e45bb7e5b3c24248ad2a5e2d8be06387.n3V6k3bs2cczwDvi",  // ÊõøÊç¢‰∏∫ÊÇ®ÁöÑÂÆûÈôÖAPIÂØÜÈí•
    model: "glm-4.5",
    name: "ÂºÄÂèëÈªòËÆ§ÈÖçÁΩÆ",
    temperature: 0.6,
    timeout: 60000  // ÊòéÁ°ÆËÆæÁΩÆ60ÁßíË∂ÖÊó∂ÔºåÁ°Æ‰øù‰∏éÊµãËØï‰ª£Á†Å‰øùÊåÅ‰∏ÄËá¥
  }
};

// ÁÆÄÂçïÂàùÂßãÂåñAIÁ≥ªÁªü - ÂÆåÂÖ®‰ªøÁÖßÊµãËØïÁΩëÈ°µ
function initializePluginAPI(apiConfig) {
  console.log('üîß ÁÆÄÂçïÂàùÂßãÂåñAIÁ≥ªÁªü...');
  
  if (!apiConfig || !apiConfig.apiKey) {
    throw new Error('ËØ∑ËæìÂÖ•APIÂØÜÈí•');
  }
  
  // ‰ΩøÁî®Êèí‰ª∂‰∏≠ÁöÑÂÆûÈôÖAPIÂÆ¢Êà∑Á´ØÔºå‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ
  pluginApiClient = new AIApiClient({
    apiKey: apiConfig.apiKey,
    model: apiConfig.model || 'glm-4.5',
    temperature: apiConfig.temperature || 0.6
  });
  
  // ÂàùÂßãÂåñAIÂàÜÁ±ªÂô®
  if (typeof CategorySchema !== 'undefined') {
    pluginClassifier = new AIClassifier(pluginApiClient, CategorySchema);
    console.log('‚úÖ Êèí‰ª∂APIÂÆ¢Êà∑Á´ØÂíåÂàÜÁ±ªÂô®Â∑≤ÂàùÂßãÂåñ');
    return true;
  }
  
  throw new Error('CategorySchemaÊú™Âä†ËΩΩ');
}

// ÂàùÂßãÂåñÂ≠òÂÇ®Êï∞ÊçÆ
chrome.runtime.onInstalled.addListener(() => {
  console.log('üì¶ ===== Êâ©Â±ïÂÆâË£Ö/Êõ¥Êñ∞‰∫ã‰ª∂Ëß¶Âèë =====');
  
  chrome.storage.local.set({
    userBehavior: [],      // Áî®Êà∑Ë°å‰∏∫ËÆ∞ÂΩï
    recommendations: [],   // Êé®ËçêÂÜÖÂÆπÂàóË°®
    diversityScore: 0,     // Â§öÊ†∑ÊÄßÂàÜÊï∞
    badges: [],            // Áî®Êà∑ÊàêÂ∞±ÂæΩÁ´†
    lastPromptTime: null,  // ‰∏äÊ¨°ÊèêÁ§∫Êó∂Èó¥
    thresholdPercentage: 70,  // ÈªòËÆ§ÈòàÂÄº70%
    aiClassificationEnabled: false, // AIÂàÜÁ±ªÂäüËÉΩÂºÄÂÖ≥
    aiApiConfig: null,     // AI APIÈÖçÁΩÆ
    classificationStats: { // ÂàÜÁ±ªÁªüËÆ°
      totalClassified: 0,
      successfulClassifications: 0,
      averageConfidence: 0
    }
  });

  console.log("‰ø°ÊÅØËåßÊàøÁ†¥Èô§Êèí‰ª∂Â∑≤ÂÆâË£Ö");
  
  // ÂºÄÂèëÈò∂ÊÆµËá™Âä®ÈÖçÁΩÆ - ÁÆÄÂåñÁâàÊú¨
  if (DEV_DEFAULT_CONFIG.enabled && 
      DEV_DEFAULT_CONFIG.apiConfig.apiKey && 
      DEV_DEFAULT_CONFIG.apiConfig.apiKey !== "your-api-key-here") {
    
    console.log("‚úÖ Ê£ÄÊµãÂà∞ÂºÄÂèëÈªòËÆ§ÈÖçÁΩÆÔºåËá™Âä®ÂêØÁî®AIÂàÜÁ±ª...");
    
    chrome.storage.local.set({
      aiClassificationEnabled: true,
      aiApiConfig: DEV_DEFAULT_CONFIG.apiConfig
    }, () => {
      console.log("‚úÖ AIÂàÜÁ±ªÂ∑≤Ëá™Âä®ÂêØÁî®ÔºàÂºÄÂèëÊ®°ÂºèÔºâ");
      
      // ÁÆÄÂçïÂàùÂßãÂåñ
      try {
        initializePluginAPI(DEV_DEFAULT_CONFIG.apiConfig);
          console.log('üéâ AIÂàÜÁ±ªÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàêÔºÅ');
      } catch (error) {
          console.error('‚ùå AIÂàÜÁ±ªÁ≥ªÁªüÂàùÂßãÂåñÂ§±Ë¥•:', error);
      }
    });
  } else {
    console.log("‚ö†Ô∏è Êú™Ê£ÄÊµãÂà∞ÊúâÊïàÁöÑÂºÄÂèëÈÖçÁΩÆÔºåËØ∑ÊâãÂä®ÈÖçÁΩÆAPIÂØÜÈí•");
  }
  
  // ÈáçÊñ∞Ê≥®ÂÖ•ÂÜÖÂÆπËÑöÊú¨Âà∞ÊâÄÊúâÂåπÈÖçÁöÑÊ†áÁ≠æÈ°µ
  setTimeout(async () => {
    try {
      const contentScripts = chrome.runtime.getManifest().content_scripts;
      for (const cs of contentScripts) {
        const tabs = await chrome.tabs.query({ url: cs.matches });
        for (const tab of tabs) {
          const target = { tabId: tab.id, allFrames: cs.all_frames };
          if (cs.js) {
            chrome.scripting.executeScript({
              target,
              files: cs.js,
            }).catch(error => {
              console.log(`ÈáçÊñ∞Ê≥®ÂÖ•ËÑöÊú¨Âà∞Ê†áÁ≠æÈ°µ ${tab.id} Â§±Ë¥•:`, error.message);
            });
          }
          if (cs.css) {
            chrome.scripting.insertCSS({
              target,
              files: cs.css,
            }).catch(error => {
              console.log(`ÈáçÊñ∞Ê≥®ÂÖ•CSSÂà∞Ê†áÁ≠æÈ°µ ${tab.id} Â§±Ë¥•:`, error.message);
            });
          }
        }
      }
      console.log('‚úÖ ÂÜÖÂÆπËÑöÊú¨ÈáçÊñ∞Ê≥®ÂÖ•ÂÆåÊàê');
    } catch (error) {
      console.error('‚ùå ÈáçÊñ∞Ê≥®ÂÖ•ÂÜÖÂÆπËÑöÊú¨Â§±Ë¥•:', error);
    }
  }, 1000); // Âª∂Ëøü1ÁßíÊâßË°å
});

// ÁõëÂê¨ÂÜÖÂÆπËÑöÊú¨Ê∂àÊÅØ
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('üì® background.jsÊî∂Âà∞Ê∂àÊÅØ:', {
    action: request.action,
    senderTab: sender.tab?.id,
    senderUrl: sender.tab?.url,
    timestamp: new Date().toISOString()
  });
  
  switch(request.action) {
    case "recordBehavior":
      recordUserBehavior(request.data);
      sendResponse({ status: "success" });
      break;
    case "recordBehaviorWithAI":
      console.log('ü§ñ Â§ÑÁêÜAIË°å‰∏∫ËÆ∞ÂΩïËØ∑Ê±Ç...');
      recordBehaviorWithAI(request.data).then(result => {
        console.log('‚úÖ AIË°å‰∏∫ËÆ∞ÂΩïÂÆåÊàêÔºåËøîÂõûÁªìÊûú:', result);
        sendResponse(result);
      }).catch(error => {
        console.error('‚ùå AIË°å‰∏∫ËÆ∞ÂΩïÂ§±Ë¥•:', error);
        sendResponse({ status: "error", error: error.message });
      });
      return true; // ÂºÇÊ≠•ÂìçÂ∫îÊ†áËÆ∞
    case "clearAICache":
      console.log('üßπ Â§ÑÁêÜÊ∏ÖÈô§AIÁºìÂ≠òËØ∑Ê±Ç...');
      try {
        if (pluginApiClient) {
          pluginApiClient.clearCache();
          console.log('‚úÖ APIÂÆ¢Êà∑Á´ØÁºìÂ≠òÂ∑≤Ê∏ÖÈô§');
        }
        if (pluginClassifier) {
          pluginClassifier.clearCache();
          console.log('‚úÖ AIÂàÜÁ±ªÂô®ÁºìÂ≠òÂ∑≤Ê∏ÖÈô§');
        }
        sendResponse({ status: "success", message: "ÁºìÂ≠òÂ∑≤Ê∏ÖÈô§" });
      } catch (error) {
        console.error('‚ùå Ê∏ÖÈô§ÁºìÂ≠òÂ§±Ë¥•:', error);
        sendResponse({ status: "error", message: error.message });
      }
      break;
    case "getAISystemStatus":
      console.log('üîç Â§ÑÁêÜAIÁ≥ªÁªüÁä∂ÊÄÅÊü•ËØ¢...');
      const aiStatus = {
        aiApiClient: !!pluginApiClient,
        aiClassifier: !!pluginClassifier,
        categorySchema: typeof CategorySchema !== 'undefined',
        apiConfig: pluginApiClient ? {
          hasApiKey: !!pluginApiClient.config?.apiKey,
          keyLength: pluginApiClient.config?.apiKey?.length || 0,
          model: pluginApiClient.config?.model,
          temperature: pluginApiClient.config?.temperature
        } : null,
        classifierConfig: pluginClassifier ? {
          confidenceThreshold: pluginClassifier.confidenceThreshold,
          fallbackEnabled: pluginClassifier.fallbackEnabled
        } : null
      };
      console.log('üìä ËøîÂõûAIÁ≥ªÁªüÁä∂ÊÄÅ:', aiStatus);
      sendResponse(aiStatus);
      break;
    case "getRecommendations":
      getRecommendations(request.tags).then(recommendations => {
        sendResponse({ recommendations });
      });
      return true; // ÂºÇÊ≠•ÂìçÂ∫îÊ†áËÆ∞
    case "showDiversityPrompt":
      showDiversityPrompt();
      sendResponse({ status: "prompt_shown" });
      break;
    case "updateThreshold":
      updateThresholdConfig(request.threshold);
      sendResponse({ status: "success" });
      break;
    case "updateAIConfig":
      updateAIConfig(request.config).then(result => {
        sendResponse(result);
      });
      return true;
    case "testAIConnection":
      testAIConnection().then(result => {
        sendResponse(result);
      });
      return true;
    case "getClassificationStats":
      getClassificationStats().then(stats => {
        sendResponse(stats);
      });
      return true;
    case "debugAIClassification":
      debugAIClassification(request.testContent).then(result => {
        sendResponse(result);
      });
      return true;
    case "getQueueStatus":
      sendResponse(getQueueStatus());
      break;
    case "addToQueue":
      console.log('üß™ ÊµãËØïÊ∑ªÂä†Âà∞ÈòüÂàó...');
      const testResult = addToAnalysisQueue(
        request.testContent || { title: "ÊµãËØïÂÜÖÂÆπ", description: "ÊµãËØïÊèèËø∞" },
        request.testUrl || "https://test.com",
        request.testData || { platform: "test", action: "view" }
      );
      sendResponse(testResult);
      break;

    default:
      console.warn('‚ö†Ô∏è Êú™Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã:', request.action);
      sendResponse({ status: "error", error: "Unknown action" });
  }
});

// ËÆ∞ÂΩïÁî®Êà∑Ë°å‰∏∫
function recordUserBehavior(data) {
  chrome.storage.local.get(["userBehavior"], (result) => {
    const behaviorHistory = result.userBehavior || [];
    
    // Ê∑ªÂä†Êñ∞Ë°å‰∏∫ËÆ∞ÂΩï
    behaviorHistory.push({
      timestamp: new Date().toISOString(),
      platform: data.platform,
      action: data.action,
      tags: data.tags || [],
      duration: data.duration || 0
    });
    
    // ‰øùÁïôÊúÄËøë100Êù°ËÆ∞ÂΩï
    const limitedHistory = behaviorHistory.slice(-100);
    chrome.storage.local.set({ userBehavior: limitedHistory }, () => {
      // Áõ¥Êé•ÁîüÊàêAIÊé®Ëçê
      generateAIBasedRecommendationsFromHistory(limitedHistory);
    });
  });
}

// Âü∫‰∫éÂéÜÂè≤ËÆ∞ÂΩïÁîüÊàêAIÊé®Ëçê
function generateAIBasedRecommendationsFromHistory(behaviorHistory) {
    console.log('üîÑ ÂºÄÂßãÂü∫‰∫éÂéÜÂè≤ËÆ∞ÂΩïÁîüÊàêAIÊé®Ëçê...');
    console.log('üìä ÊÄªË°å‰∏∫ËÆ∞ÂΩïÊï∞:', behaviorHistory.length);
    
    if (behaviorHistory.length < 5) {
      console.log('‚ö†Ô∏è Ë°å‰∏∫ËÆ∞ÂΩï‰∏çË∂≥5Êù°ÔºåË∑≥ËøáÊé®ËçêÁîüÊàê');
      return;
    }

    // ÂàÜÊûêAIÂàÜÁ±ªÁöÑË°å‰∏∫ËÆ∞ÂΩï
    const aiClassifiedBehaviors = behaviorHistory.filter(record => record.classification);
    console.log('ü§ñ AIÂàÜÁ±ªËÆ∞ÂΩïÊï∞:', aiClassifiedBehaviors.length);
    
    if (aiClassifiedBehaviors.length >= 3) {
      console.log('‚úÖ AIÂàÜÁ±ªËÆ∞ÂΩïÂÖÖË∂≥ÔºåÂºÄÂßãÁîüÊàêÊô∫ËÉΩÊé®Ëçê');
      // ‰ΩøÁî®AIÂàÜÁ±ªÁªìÊûúÁîüÊàêÊé®Ëçê
      const recommendations = generateAIBasedRecommendations(aiClassifiedBehaviors);
      
      // ‰øùÂ≠òÊé®ËçêÁªìÊûú
      chrome.storage.local.set({ recommendations }, () => {
        console.log('üíæ Êé®ËçêÂÜÖÂÆπÂ∑≤‰øùÂ≠òÂà∞Â≠òÂÇ®');
      });
      
      // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊòæÁ§∫ÊèêÁ§∫
      checkPromptNeed(behaviorHistory);
    } else {
      console.log('‚ö†Ô∏è AIÂàÜÁ±ªËÆ∞ÂΩï‰∏çË∂≥3Êù°ÔºåÊó†Ê≥ïÁîüÊàêÊô∫ËÉΩÊé®Ëçê');
      // Â¶ÇÊûúÊ≤°ÊúâË∂≥Â§üÁöÑAIÂàÜÁ±ªÊï∞ÊçÆÔºåÁîüÊàêÈªòËÆ§Êé®Ëçê
      const defaultRecommendations = getDefaultRecommendations();
      chrome.storage.local.set({ recommendations: defaultRecommendations }, () => {
        console.log('üíæ ÈªòËÆ§Êé®ËçêÂÜÖÂÆπÂ∑≤‰øùÂ≠òÂà∞Â≠òÂÇ®');
      });
    }
}

// Âü∫‰∫éAIÂàÜÁ±ªÁªìÊûúÁîüÊàêÊé®Ëçê
function generateAIBasedRecommendations(aiClassifiedBehaviors) {
  console.log('üéØ ÂºÄÂßãÁîüÊàêAIÊé®ËçêÔºåÂü∫‰∫é', aiClassifiedBehaviors.length, 'Êù°Ë°å‰∏∫ËÆ∞ÂΩï');
  
  // ÁªüËÆ°Áî®Êà∑ÂÖ¥Ë∂£ÂàÜÂ∏É
  const categoryCount = {};
  const subCategoryCount = {};
  
  aiClassifiedBehaviors.forEach(record => {
    if (record.classification) {
      const mainCat = record.classification.mainCategory.id;
      const subCat = record.classification.subCategory.id;
      
      categoryCount[mainCat] = (categoryCount[mainCat] || 0) + 1;
      subCategoryCount[subCat] = (subCategoryCount[subCat] || 0) + 1;
    }
  });
  
  console.log('üìä Áî®Êà∑ÂÖ¥Ë∂£ÂàÜÂ∏É:', categoryCount);
  
  // ÊâæÂá∫Áî®Êà∑ËæÉÂ∞ëÊ∂âÂèäÁöÑÁ±ªÂà´
  const allMainCategories = CategorySchema ? CategorySchema.getMainCategories() : [];
  const recommendations = [];
  
  allMainCategories.forEach(category => {
    const userCount = categoryCount[category.id] || 0;
    const totalUserBehaviors = aiClassifiedBehaviors.length;
    const ratio = totalUserBehaviors > 0 ? userCount / totalUserBehaviors : 0;
    
    console.log(`üìà ${category.name}: ${userCount}/${totalUserBehaviors} = ${(ratio * 100).toFixed(1)}%`);
    
    // Â¶ÇÊûúÁî®Êà∑Âú®ËØ•Á±ªÂà´ÁöÑË°å‰∏∫Âç†ÊØîËæÉ‰ΩéÔºåÊé®ËçêËØ•Á±ªÂà´
    if (ratio < 0.3) {
      console.log(`üéØ Êé®ËçêÁ±ªÂà´: ${category.name} (Âç†ÊØî${(ratio * 100).toFixed(1)}% < 30%)`);
      
      // Ëé∑ÂèñËØ•‰∏ªÁ±ªÂà´‰∏ãÁöÑÊâÄÊúâÂ≠êÁ±ªÂà´ÂèäÂÖ∂ÂÖ≥ÈîÆËØç
      const subCategories = CategorySchema.CATEGORY_SCHEMA[category.id]?.subcategories || {};
      
      // ÈÅçÂéÜÊâÄÊúâÂ≠êÁ±ªÂà´ÔºåÊî∂ÈõÜÂÖ≥ÈîÆËØç
      Object.keys(subCategories).forEach(subKey => {
        const subCategory = subCategories[subKey];
        if (subCategory.keywords && subCategory.keywords.length > 0) {
          // ÈöèÊú∫ÈÄâÊã©1-2‰∏™ÂÖ≥ÈîÆËØçÔºàÈÅøÂÖçÊé®ËçêËøáÂ§öÔºâ
          const numKeywords = Math.min(2, Math.max(1, Math.floor(Math.random() * 2) + 1));
          const shuffledKeywords = [...subCategory.keywords].sort(() => 0.5 - Math.random());
          const selectedKeywords = shuffledKeywords.slice(0, numKeywords);
          
          selectedKeywords.forEach(keyword => {
            recommendations.push({
              keyword: keyword,
              category: category.name,
              subCategory: subCategory.name,
              reason: 'Â¢ûÂä†ÂÜÖÂÆπÂ§öÊ†∑ÊÄß',
              diversityScore: 1 - ratio
            });
          });
          
          console.log(`  üìù ${subCategory.name}: ÈÄâÊã©${numKeywords}‰∏™ÂÖ≥ÈîÆËØç`);
        }
      });
    }
  });
  
  console.log('üìã Êî∂ÈõÜÂà∞', recommendations.length, '‰∏™Êé®ËçêÈ°π');
  
  // ÊåâÂ§öÊ†∑ÊÄßÂæóÂàÜÊéíÂ∫èÔºåÈöèÊú∫Êâì‰π±ÔºåËøîÂõûÂâç6‰∏™ÂÖ∑‰ΩìÂÖ≥ÈîÆËØç
  const finalRecommendations = recommendations
    .sort((a, b) => b.diversityScore - a.diversityScore)
    .sort(() => 0.5 - Math.random()) // ÈöèÊú∫Êâì‰π±
    .slice(0, 6)
    .map(item => item.keyword);
  
  console.log('‚úÖ ÊúÄÁªàÊé®ËçêÂÖ≥ÈîÆËØç:', finalRecommendations);
  return finalRecommendations;
}



// ‰ªéÊ†áÁ≠æÊàñÂàÜÁ±ªÁªìÊûúËé∑ÂèñÈ¢ÜÂüü‰ø°ÊÅØÔºàÂ¢ûÂº∫ÁâàÔºâ
function getDomainFromTag(tag) {
  // È¶ñÂÖàÂ∞ùËØï‰ªéAIÂàÜÁ±ªÁªìÊûú‰∏≠Ëé∑Âèñ
  if (typeof tag === 'object' && tag.classification) {
    return tag.classification.mainCategory.id;
  }
  
  // ‰º†ÁªüÁöÑÊ†áÁ≠æÂà∞È¢ÜÂüüÊò†Â∞Ñ
  const domainMapping = {
    "ÁßëÊäÄÂàõÊñ∞": "technology",
    "AIÊäÄÊúØ": "technology", 
    "Á°¨‰ª∂ÁßëÊäÄ": "technology",
    "ËΩØ‰ª∂ÂºÄÂèë": "technology",
    "Êï∞Â≠óÁîüÊ¥ª": "technology",
    "ÊñáÂåñËâ∫ÊúØ": "culture_arts",
    "‰º†ÁªüÊñáÂåñ": "culture_arts",
    "Áé∞‰ª£Ëâ∫ÊúØ": "culture_arts", 
    "ÊñáÂ≠¶Âàõ‰Ωú": "culture_arts",
    "Èü≥‰πêÂΩ±ËßÜ": "culture_arts",
    "ÁßëÂ≠¶Êé¢Á¥¢": "science_exploration",
    "Ëá™ÁÑ∂ÁßëÂ≠¶": "science_exploration",
    "ÂåªÂ≠¶ÂÅ•Â∫∑": "science_exploration",
    "ÁéØÂ¢ÉÁîüÊÄÅ": "science_exploration",
    "Â§©ÊñáÂú∞ÁêÜ": "science_exploration",
    "Á§æ‰ºö‰∫∫Êñá": "society_humanity",
    "ÂéÜÂè≤Âì≤Â≠¶": "society_humanity",
    "ÂøÉÁêÜÂ≠¶": "society_humanity",
    "Á§æ‰ºöËÆÆÈ¢ò": "society_humanity",
    "Ê≥ïÂæãÊîøÊ≤ª": "society_humanity",
    "ÁîüÊ¥ªÊñπÂºè": "lifestyle",
    "ÁæéÈ£üÁÉπÈ•™": "lifestyle",
    "ÊóÖË°åÊé¢Èô©": "lifestyle",
    "Êó∂Â∞öÁæéÂ¶Ü": "lifestyle",
    "ÂÆ∂Â±ÖË£ÖÈ•∞": "lifestyle",
    "ÊïôËÇ≤ÊàêÈïø": "education_growth",
    "Â≠¶‰π†ÊñπÊ≥ï": "education_growth",
    "ËÅå‰∏öÂèëÂ±ï": "education_growth",
    "ÊäÄËÉΩÂüπËÆ≠": "education_growth",
    "‰∫≤Â≠êÊïôËÇ≤": "education_growth",
    "ÂïÜ‰∏öË¥¢Áªè": "business_finance",
    "Âàõ‰∏öÊäïËµÑ": "business_finance",
    "Â∏ÇÂú∫ÂàÜÊûê": "business_finance",
    "ÁªèÊµéË∂ãÂäø": "business_finance",
    "ÁêÜË¥¢ËßÑÂàí": "business_finance",
    "Â®±‰πê‰ºëÈó≤": "entertainment",
    "Ê∏∏ÊàèÁ´ûÊäÄ": "entertainment",
    "‰ΩìËÇ≤ËøêÂä®": "entertainment",
    "ÁªºËâ∫Â®±‰πê": "entertainment",
    "ÊêûÁ¨ëÂπΩÈªò": "entertainment"
  };
  
  // Áõ¥Êé•ÂåπÈÖç
  if (domainMapping[tag]) {
    return domainMapping[tag];
  }
  
  // Ê®°Á≥äÂåπÈÖç
  for (const [keyword, domain] of Object.entries(domainMapping)) {
    if (tag.includes(keyword) || keyword.includes(tag)) {
      return domain;
    }
  }
  
  // ÈªòËÆ§ËøîÂõû
  return "lifestyle";
}

// ÊòæÁ§∫Â§öÊ†∑ÊÄßÊèêÁ§∫ÂºπÁ™ó
function showDiversityPrompt() {
  chrome.windows.create({
    url: "diversity-prompt.html",
    type: "popup",
    width: 400,
    height: 300,
    left: Math.round((screen.width - 400) / 2),
    top: Math.round((screen.height - 300) / 2)
  });
}

// Ëé∑ÂèñÊé®ËçêÂÜÖÂÆπÔºàÊô∫ËÉΩÊé®ËçêÁâàÔºâ
async function getRecommendations(tags) {
  return new Promise((resolve) => {
    chrome.storage.local.get(['recommendations', 'userBehavior'], (result) => {
      const storedRecommendations = result.recommendations || [];
      const behaviorHistory = result.userBehavior || [];
      
      console.log('üìä Ëé∑ÂèñÊé®ËçêÂÜÖÂÆπ:', {
        storedRecommendationsCount: storedRecommendations.length,
        behaviorHistoryCount: behaviorHistory.length,
        inputTags: tags
      });
      
      // Â¶ÇÊûúÊúâÂ≠òÂÇ®ÁöÑÊô∫ËÉΩÊé®ËçêÔºå‰ºòÂÖà‰ΩøÁî®
      if (storedRecommendations.length > 0) {
        console.log('‚úÖ ‰ΩøÁî®Êô∫ËÉΩÁîüÊàêÁöÑÊé®ËçêÂÜÖÂÆπ:', storedRecommendations);
        resolve(storedRecommendations);
      } else if (behaviorHistory.length >= 5) {
        // Â¶ÇÊûúÊúâË∂≥Â§üÁöÑË°å‰∏∫Êï∞ÊçÆ‰ΩÜÊ≤°ÊúâÊé®ËçêÔºåËß¶ÂèëÈáçÊñ∞ÁîüÊàê
        console.log('üîÑ Ëß¶ÂèëÊé®ËçêÈáçÊñ∞ÁîüÊàê...');
        generateAIBasedRecommendationsFromHistory(behaviorHistory);
        
        // Á≠âÂæÖÊé®ËçêÁîüÊàêÂÆåÊàêÂêéËøîÂõû
        setTimeout(() => {
          chrome.storage.local.get(['recommendations'], (updatedResult) => {
            const newRecommendations = updatedResult.recommendations || [];
            if (newRecommendations.length > 0) {
              console.log('‚úÖ ÈáçÊñ∞ÁîüÊàêÁöÑÊé®ËçêÂÜÖÂÆπ:', newRecommendations);
              resolve(newRecommendations);
            } else {
              console.log('‚ö†Ô∏è ÈáçÊñ∞ÁîüÊàêÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§Êé®Ëçê');
              resolve(getDefaultRecommendations(tags));
            }
          });
        }, 200); // ÁªôÊé®ËçêÁîüÊàê‰∏Ä‰∫õÊó∂Èó¥
      } else {
        // ‰ΩøÁî®ÈªòËÆ§Êé®Ëçê
        console.log('üìù ‰ΩøÁî®ÈªòËÆ§Êé®ËçêÂÜÖÂÆπ');
        resolve(getDefaultRecommendations(tags));
      }
    });
  });
}

// Ëé∑ÂèñÈªòËÆ§Êé®ËçêÂÜÖÂÆπ
function getDefaultRecommendations(tags) {
  console.log('üìù ÁîüÊàêÈªòËÆ§Êé®ËçêÂÜÖÂÆπ');
  
  if (tags && tags.length > 0) {
    // Âü∫‰∫éËæìÂÖ•Ê†áÁ≠æÁîüÊàêÁõ∏ÂÖ≥Êé®Ëçê
    const tagBasedRecommendations = tags.map(tag => `${tag}Áõ∏ÂÖ≥ÂÜÖÂÆπ`);
    console.log('üè∑Ô∏è Âü∫‰∫éÊ†áÁ≠æÁöÑÊé®Ëçê:', tagBasedRecommendations);
    return tagBasedRecommendations;
  } else {
    // ‰ªéÊâÄÊúâÁ±ªÂà´‰∏≠ÈöèÊú∫ÈÄâÊã©‰∏Ä‰∫õÂÖ∑‰ΩìÁöÑÂÖ≥ÈîÆËØç‰Ωú‰∏∫ÈªòËÆ§Êé®Ëçê
    const defaultRecommendations = [];
    const allCategories = CategorySchema ? CategorySchema.CATEGORY_SCHEMA : {};
    
    // ÈöèÊú∫ÈÄâÊã©Âá†‰∏™‰∏ªÁ±ªÂà´
    const categoryKeys = Object.keys(allCategories);
    const shuffledCategories = categoryKeys.sort(() => 0.5 - Math.random());
    const selectedCategories = shuffledCategories.slice(0, 3);
    
    selectedCategories.forEach(categoryKey => {
      const category = allCategories[categoryKey];
      const subCategoryKeys = Object.keys(category.subcategories);
      const randomSubKey = subCategoryKeys[Math.floor(Math.random() * subCategoryKeys.length)];
      const subCategory = category.subcategories[randomSubKey];
      
      if (subCategory.keywords && subCategory.keywords.length > 0) {
        const randomKeyword = subCategory.keywords[Math.floor(Math.random() * subCategory.keywords.length)];
        defaultRecommendations.push(randomKeyword);
      }
    });
    
    // Â¶ÇÊûúÊî∂ÈõÜÁöÑÂÖ≥ÈîÆËØç‰∏çÂ§üÔºåÊ∑ªÂä†‰∏Ä‰∫õÈÄöÁî®Êé®Ëçê
    while (defaultRecommendations.length < 4) {
      const fallbackKeywords = [
        "ChatGPT‰ΩøÁî®ÊäÄÂ∑ß", "ÊïÖÂÆ´ÊñáÁâ©‰øÆÂ§ç", "ÈáèÂ≠êÁâ©ÁêÜÂÆûÈ™å", "ÂøÉÁêÜÂí®ËØ¢ÊäÄÂ∑ß",
        "ÂÆ∂Â∏∏ËèúÂà∂‰Ωú", "ÊóÖÊ∏∏ÊîªÁï•Âà∂‰Ωú", "È´òÊïàÂ≠¶‰π†ÊñπÊ≥ï", "Âàõ‰∏öÁªèÈ™åÂàÜ‰∫´"
      ];
      const randomFallback = fallbackKeywords[Math.floor(Math.random() * fallbackKeywords.length)];
      if (!defaultRecommendations.includes(randomFallback)) {
        defaultRecommendations.push(randomFallback);
      }
    }
    
    console.log('üé≤ ÈªòËÆ§Â§öÊ†∑ÂåñÊé®Ëçê:', defaultRecommendations);
    return defaultRecommendations;
  }
}

// Êõ¥Êñ∞ÈòàÂÄºÈÖçÁΩÆ
function updateThresholdConfig(percentage) {
  const validPercentage = Math.max(30, Math.min(90, percentage));
  chrome.storage.local.set({ 
    thresholdPercentage: validPercentage 
  }, () => {
    console.log(`ÈòàÂÄºÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞‰∏∫: ${validPercentage}%`);
  });
}

// ‰ΩøÁî®AIËÆ∞ÂΩïÁî®Êà∑Ë°å‰∏∫ - ÈòüÂàóÁâàÊú¨
async function recordBehaviorWithAI(data) {
  console.log('ü§ñ ===== AIË°å‰∏∫ËÆ∞ÂΩïÂºÄÂßãÔºàÈòüÂàóÁâàÊú¨Ôºâ =====');
  
  // Áõ¥Êé•Ê∑ªÂä†Âà∞ÈòüÂàóÔºåÊó†ÈúÄ‰ªª‰ΩïÂà§Êñ≠
  const result = addToAnalysisQueue(data.extractedContent, data.url, data);
  
  console.log('üì• ËØ∑Ê±ÇÂ∑≤Âä†ÂÖ•ÈòüÂàó:', result);
  console.log('üèÅ ===== AIË°å‰∏∫ËÆ∞ÂΩïÁªìÊùüÔºàÈòüÂàóÁâàÊú¨Ôºâ =====');
  
  return result;
}

// ÁîüÊàêÂ§áÁî®Ê†áÁ≠æ
function generateFallbackTags(extractedContent) {
  const tags = [];
  
  if (extractedContent?.title) {
    tags.push(extractedContent.title.substring(0, 20));
  }
  
  if (extractedContent?.tags && extractedContent.tags.length > 0) {
    tags.push(...extractedContent.tags.slice(0, 3));
  }
  
  if (extractedContent?.platform) {
    tags.push(extractedContent.platform + 'ÂÜÖÂÆπ');
  }
  
  return tags.filter(tag => tag && tag.length > 1).slice(0, 5);
}

// Êõ¥Êñ∞ÂàÜÁ±ªÁªüËÆ°‰ø°ÊÅØ
async function updateClassificationStats(classification) {
  if (!classification) return;
  
  const result = await chrome.storage.local.get(['classificationStats']);
  const stats = result.classificationStats || {
    totalClassified: 0,
    successfulClassifications: 0,
    averageConfidence: 0
  };
  
  stats.totalClassified += 1;
  
  if (classification.overallConfidence >= 0.5) {
    stats.successfulClassifications += 1;
  }
  
  // Êõ¥Êñ∞Âπ≥ÂùáÁΩÆ‰ø°Â∫¶
  const previousTotal = (stats.averageConfidence * (stats.totalClassified - 1));
  stats.averageConfidence = (previousTotal + classification.overallConfidence) / stats.totalClassified;
  
  await chrome.storage.local.set({ classificationStats: stats });
}

// Êõ¥Êñ∞AIÈÖçÁΩÆ - ÁÆÄÂåñÁâàÊú¨
async function updateAIConfig(config) {
  try {
    await chrome.storage.local.set({
      aiClassificationEnabled: config.enabled || false,
      aiApiConfig: config.apiConfig || null
    });
    
    // ÈáçÊñ∞ÂàùÂßãÂåñAIÁ≥ªÁªü
    if (config.enabled && config.apiConfig) {
      initializePluginAPI(config.apiConfig);
    } else {
      // Á¶ÅÁî®AIÁ≥ªÁªü
      pluginApiClient = null;
      pluginClassifier = null;
    }
    
    return { status: "success", message: "AIÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞" };
  } catch (error) {
    return { status: "error", message: error.message };
  }
}

// ÊµãËØïAIËøûÊé• - ÁÆÄÂåñÁâàÊú¨
async function testAIConnection() {
  if (!pluginApiClient) {
    return { success: false, message: "AIÁ≥ªÁªüÊú™ÂàùÂßãÂåñ" };
  }
  
  try {
    const result = await pluginApiClient.testConnection();
    return result;
  } catch (error) {
    return { success: false, message: error.message };
  }
}

// Ëé∑ÂèñÂàÜÁ±ªÁªüËÆ°‰ø°ÊÅØ
async function getClassificationStats() {
  const result = await chrome.storage.local.get(['classificationStats', 'userBehavior']);
  const stats = result.classificationStats || {
    totalClassified: 0,
    successfulClassifications: 0,
    averageConfidence: 0
  };
  
  const behaviorHistory = result.userBehavior || [];
  const aiClassifiedCount = behaviorHistory.filter(b => b.classification).length;
  
  return {
    ...stats,
    totalBehaviorRecords: behaviorHistory.length,
    aiClassifiedRecords: aiClassifiedCount,
    classificationRate: behaviorHistory.length > 0 ? aiClassifiedCount / behaviorHistory.length : 0
  };
}

// Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊòæÁ§∫Â§öÊ†∑ÊÄßÊèêÁ§∫ÔºàÂ¢ûÂº∫ÁâàÔºâ
function checkPromptNeed(behaviorHistory) {
  const recentBehavior = behaviorHistory.filter(record => {
    const behaviorTime = new Date(record.timestamp);
    const now = new Date();
    return now - behaviorTime <= 48 * 60 * 60 * 1000; // 48Â∞èÊó∂ÂÜÖ
  });

  if (recentBehavior.length < 10) return;
  
  // ÂàÜÊûêÈ¢ÜÂüüÂàÜÂ∏É
  const domainCounts = {};
  recentBehavior.forEach(record => {
    if (record.tags) {
      record.tags.forEach(tag => {
        const domain = getDomainFromTag(tag);
        if (domain) domainCounts[domain] = (domainCounts[domain] || 0) + 1;
      });
    }
  });

  // ËØªÂèñÁî®Êà∑ÈÖçÁΩÆÁöÑÈòàÂÄº
  chrome.storage.local.get(["thresholdPercentage"], (result) => {
    const thresholdPercentage = result.thresholdPercentage || 70;
    const thresholdCount = Math.floor(10 * thresholdPercentage / 100);
    
    console.log(`ÂΩìÂâçÈòàÂÄºËÆæÁΩÆ: ${thresholdPercentage}%, ÂØπÂ∫îËÆ°Êï∞: ${thresholdCount}`);

    // Â¶ÇÊûúÂçï‰∏ÄÈ¢ÜÂüüÂç†ÊØîË∂ÖËøáÁî®Êà∑ËÆæÁΩÆÁöÑÈòàÂÄºÔºåÊòæÁ§∫ÊèêÁ§∫
    const maxDomainCount = Math.max(...Object.values(domainCounts), 0);
    if (maxDomainCount > thresholdCount) {
      chrome.storage.local.get(["lastPromptTime"], (result) => {
        const lastPrompt = result.lastPromptTime ? new Date(result.lastPromptTime) : null;
        const now = new Date();

        // 3Â§©ÂÜÖÊú™ÊèêÁ§∫ËøáÊâçÊòæÁ§∫
        if (!lastPrompt || now - lastPrompt > 3 * 24 * 60 * 60 * 1000) {
          console.log(`Ëß¶ÂèëÊèêÁ§∫: Âçï‰∏ÄÈ¢ÜÂüüËÆ°Êï∞(${maxDomainCount}) > ÈòàÂÄº(${thresholdCount})`);
          showDiversityPrompt();
          chrome.storage.local.set({ lastPromptTime: now.toISOString() });
        }
      });
    }
  });
}

// Ë∞ÉËØïÂ∑•ÂÖ∑ÔºöÊâãÂä®ÊµãËØïAIÂàÜÁ±ª - ÁÆÄÂåñÁâàÊú¨
async function debugAIClassification(testContent) {
  console.log('üîß ÂºÄÂßãAIÂàÜÁ±ªË∞ÉËØïÊµãËØï...');
  
  try {
    // ÁÆÄÂçïÊ£ÄÊü•
    if (!pluginApiClient || !pluginClassifier) {
      // Â∞ùËØïÂàùÂßãÂåñ
      const result = await chrome.storage.local.get(['aiApiConfig']);
      if (result.aiApiConfig) {
        initializePluginAPI(result.aiApiConfig);
      } else {
        return { success: false, error: 'Êú™ÊâæÂà∞APIÈÖçÁΩÆ' };
      }
    }
    
    // ÊµãËØïAPIËøûÊé•
    const connectionTest = await pluginApiClient.testConnection();
    if (!connectionTest.success) {
      return { success: false, error: 'APIËøûÊé•Â§±Ë¥•: ' + connectionTest.message };
    }
    
    // ÊâßË°åÂàÜÁ±ªÊµãËØï
    const startTime = Date.now();
    const classification = await pluginClassifier.classifyContent(testContent);
    const duration = Date.now() - startTime;
    
    console.log('‚úÖ Ë∞ÉËØïÊµãËØïÂÆåÊàê:', classification);
    
    return {
      success: true,
      classification: classification,
      duration: duration,
      connectionTest: connectionTest
    };
    
  } catch (error) {
    console.error('‚ùå Ë∞ÉËØïÊµãËØïÂ§±Ë¥•:', error);
    return {
      success: false,
      error: error.message
    };
  }
}


